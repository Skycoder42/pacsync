name: Continous Integration and Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  ci:
    name: CI
    uses: Skycoder42/dart_test_tools/.github/workflows/dart.yml@main
    with:
      buildRunner: true
      extendedAnalyzerArgs: --linter test-import # Do not run the lib-export linter
      unitTestPaths: ""
      platforms: '["linux"]'

  cd:
    name: CD
    needs:
      - ci
    uses: Skycoder42/dart_test_tools/.github/workflows/compile.yml@main
    with:
      buildRunner: true
      targets: '["pacsync"]'
      platforms: '["linux"]'

  aur_deploy:
    name: AUR
    runs-on: ubuntu-latest
    needs: cd
    if: needs.cd.outputs.releaseCreated == 'true'
    container: archlinux:base-devel
    steps:
      - name: Install pacman dependencies
        run: sudo pacman -Sy --noconfirm git openssh pacman-contrib dart namcap
      - name: Create build user
        run: |
          set -exo pipefail
          useradd -m -G wheel -s /bin/bash -d /build build
          echo '%wheel ALL=(ALL:ALL) NOPASSWD: ALL' >> /etc/sudoers
      - name: Checkout source repository
        uses: actions/checkout@v2
        with:
          path: src
      - name: Prepare SSH for AUR repo checkout
        run: |
          set -exo pipefail
          mkdir -p "$HOME/.ssh"
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > "$RUNNER_TEMP/ssh-key"
          echo "Host aur.archlinux.org" > "$HOME/.ssh/config"
          echo "  IdentityFile $RUNNER_TEMP/ssh-key" >> "$HOME/.ssh/config"
          echo "  User aur" >> "$HOME/.ssh/config"
          echo "aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN" >> "$HOME/.ssh/known_hosts"
      - name: Clone AUR repository
        run: git clone "ssh://aur@aur.archlinux.org/$(yq ".name" pubspec.yaml).git" ./aur
      - run: dart pub get
        working-directory: src
      - run: dart run build_runner build
        working-directory: src
      - run: dart run tool/makepkg/generate_pkgbuild.dart ../aur
        working-directory: src
      - run: chown -R build:build aur
      - run: updpkgsums
        working-directory: aur
      - run: namcap -i PKGBUILD
        working-directory: aur
      - run: makepkg -sfC --check --noconfirm
        working-directory: aur
      - run: makepkg --printsrcinfo > .SRCINFO
        working-directory: aur
      - run: git add PKGBUILD CHANGELOG.md .SRCINFO
        working-directory: aur
      - run: git commit -m "Update package to version $(yq ".version" pubspec.yaml)"
        working-directory: aur
      - run: git push
        working-directory: aur
